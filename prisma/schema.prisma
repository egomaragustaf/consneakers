// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  email    String @unique
  name     String
  username String @unique

  locations UserLocation[]

  password UserPassword?

  carts Cart? @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String?

  @@index([cartId])
}

model UserPassword {
  id String @id @default(cuid())

  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserLocation {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  label   String
  address String? @db.Text
  mapsURL String? @db.Text

  countryCode String?
  province    String?
  city        String?
  district    String?
  subDistrict String?

  street        String? @db.Text
  streetDetails String? @db.Text
  postalCode    String?

  latitude  Decimal? // -90 to 90, Example: -5.1234567
  longitude Decimal? // -180 to 180, Example: 105.1234567

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id String @id @default(cuid())

  slug  String @unique // Ex: converse-run-star-hike-hi-black-white
  name  String // Ex: Converse Run Star Hike Hi Black White
  price Int // Ex: Rp 1,100,000

  imageURL String? @db.Text

  description String? @db.Text

  soldQuantity  Int?
  stockQuantity Int

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(cuid())

  // Define the one-to-many relationship between Cart and CartItem
  cartItems       CartItem[]
  totalQuantity   Int
  grandTotalPrice Int

  user   User[]
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CartItem {
  id String @id @default(cuid())

  cart       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId     String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  quantity   Int
  price      Int
  totalPrice Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}
